一
工厂模式：
创建接口-创建接口的实现类-创建工厂类：包含得到对象的方法-使用工厂指定方法来获取对象

抽象工厂模式：
创建接口-创建接口的实现类-创建工厂抽象类：包含得到对象的抽象方法-创建抽象类的拓展工厂类(继承抽象方法)-调用-创建一个工厂类来细分上一级的工厂类-调用大工厂类，再通过选择上一级工厂类来获取对象

单例模式：https://www.runoob.com/design-pattern/singleton-pattern.html
创建一个类，将构造函数设为私有，利用静态方法返回对象。
懒汉式：
	开始时仅定义静态对象，不创建对象，调用方法时再创建对象。
	1，若要保证线程安全，在get对象的方法前加synchronized。线程安全，降低性能。
	2，双重校验锁，不在方法前加synchronized，改为在定义静态变量时加volatile，保持高性能同时线程安全
	3，登记式/静态内部式，不加sy和vo，改为增加一个私有静态方法，方法中用一个静态final变量new对象，调用get方法时返回这个变量。
	4,枚举式
饿汉式：
	开始时定义静态变量并且创建对象，调用方法时直接返回创建好的对象

Builder模式：
创建一个builder来专门创建对象
